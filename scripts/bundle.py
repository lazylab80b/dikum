#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# SPDX-License-Identifier: MIT
"""
Bundle tool for ledger.

- Read:
    ledgertool/ledger_core.py
    ledgertool/ledger_cli.py
- Emit:
    GPTs/ledger.py   (single-file bundle for Custom GPTs knowledge)

Features:
  * Embeds sources as strings and dynamically loads them into sys.modules so that
    imports like `from ledgertool.ledger_core import ...` work unchanged.
  * Writes metadata banner: git commit SHA, sha256 of sources, build UTC time.
"""

from __future__ import annotations

import hashlib
import os
import subprocess
import sys
import types
from datetime import datetime, timezone
from pathlib import Path


ROOT = Path(__file__).resolve().parents[1]
SRC_CORE = ROOT / "ledgertool" / "ledger_core.py"
SRC_CLI = ROOT / "ledgertool" / "ledger_cli.py"
OUT = ROOT / "GPTs" / "ledger.py"


def read_text(p: Path) -> str:
    if not p.exists():
        sys.exit(f"[bundle] missing source: {p}")
    try:
        return p.read_text(encoding="utf-8")
    except Exception as e:
        sys.exit(f"[bundle] failed to read {p}: {e}")


def sha256_text(s: str) -> str:
    return hashlib.sha256(s.encode("utf-8")).hexdigest()


def git_rev() -> str:
    try:
        return (
            subprocess.check_output(["git", "rev-parse", "--short", "HEAD"], cwd=str(ROOT))
            .decode("utf-8")
            .strip()
        )
    except Exception:
        return "unknown"


def make_banner(meta: dict) -> str:
    lines = [
        "#!/usr/bin/env python3",
        "# -*- coding: utf-8 -*-",
        "#",
        "# ====== LEDGER BUNDLE ======",
        f"# BUILD_TIME_UTC: {meta['build_time_utc']}",
        f"# GIT_SHA:        {meta['git_sha']}",
        f"# CORE_SHA256:    {meta['core_sha256']}",
        f"# CLI_SHA256:     {meta['cli_sha256']}",
        "# ===========================",
        "",
    ]
    return "\n".join(lines)


TEMPLATE = """{banner}
\"\"\"Single-file bundle of ledger tool.

This file is auto-generated by scripts/bundle.py.
Do not edit manually.
\"\"\"

from __future__ import annotations
import sys, types

# ---- Embedded sources (UTF-8, LF) ----
CORE_SRC = r\"\"\"{core_src}\"\"\"
CLI_SRC  = r\"\"\"{cli_src}\"\"\"

# ---- Dynamic module wiring ----
def _install_core():
    mod_name_pkg = "ledgertool"
    mod_name_core = "ledgertool.ledger_core"
    # create package 'ledgertool' if missing
    if mod_name_pkg not in sys.modules:
        pkg = types.ModuleType(mod_name_pkg)
        pkg.__path__ = []  # mark as package
        sys.modules[mod_name_pkg] = pkg
    # create module 'ledgertool.ledger_core'
    core_mod = types.ModuleType(mod_name_core)
    ns = core_mod.__dict__
    exec(CORE_SRC, ns, ns)
    sys.modules[mod_name_core] = core_mod
    # also expose as top-level 'ledger_core' (fallback import style)
    sys.modules.setdefault("ledger_core", core_mod)
    return core_mod

def _run_cli():
    # Execute CLI in its own module namespace so __name__ == "__main__" acts like a script.
    mod = types.ModuleType("__bundled_cli__")
    ns = mod.__dict__
    _install_core()
    exec(CLI_SRC, ns, ns)

if __name__ == "__main__":
    _run_cli()
"""


def normalize_newlines(s: str) -> str:
    # Ensure LF endings for reproducibility across platforms
    return s.replace("\r\n", "\n").replace("\r", "\n")


def main() -> None:
    core_src = normalize_newlines(read_text(SRC_CORE))
    cli_src = normalize_newlines(read_text(SRC_CLI))

    meta = {
        "build_time_utc": datetime.now(timezone.utc).strftime("%Y-%m-%dT%H:%M:%SZ"),
        "git_sha": git_rev(),
        "core_sha256": sha256_text(core_src),
        "cli_sha256": sha256_text(cli_src),
    }
    banner = make_banner(meta)

    out_text = TEMPLATE.format(banner=banner, core_src=core_src, cli_src=cli_src)

    OUT.parent.mkdir(parents=True, exist_ok=True)
    OUT.write_text(out_text, encoding="utf-8", newline="\n")
    try:
        os.chmod(OUT, 0o755)
    except Exception:
        pass

    print(f"[bundle] wrote {OUT.relative_to(ROOT)}")
    print(f"[bundle] GIT_SHA={meta['git_sha']}")
    print(f"[bundle] CORE_SHA256={meta['core_sha256']}")
    print(f"[bundle] CLI_SHA256={meta['cli_sha256']}")


if __name__ == "__main__":
    main()
